/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;

/**
 *
 * @author milluki
 */
public class typingGameGui extends javax.swing.JFrame {

    /**
     * Creates new form typingGameGui
     */
    public typingGameGui() {
        initComponents();
        indexRight = 0;
        indexWrong = 0;
        cyanPainter = new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.cyan);
        redPainter = new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.red);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textToType = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 640));

        javax.swing.SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                textField.requestFocusInWindow();
            }
        });
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldKeyTyped(evt);
            }
        });
        getContentPane().add(textField, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        textToType.setEditable(false);
        textToType.setColumns(20);
        textToType.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        textToType.setLineWrap(true);
        textToType.setRows(5);
        textToType.setText("hello world\nhello");
        jScrollPane1.setViewportView(textToType);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        char[] text = textToType.getText().toCharArray();
        if (c == ' ' || c == '\n') {
            if (indexWrong == 0 && (text[indexRight] == ' ' || text[indexRight] == '\n')) {
                textField.setText("");
                indexRight++;
                return;
            }
        }
        if (c == KeyEvent.VK_BACKSPACE) { //backspace
            if ((!(textField.getText().equals(""))) || indexWrong != 0) {
                System.out.println("-");
                System.out.println(indexWrong);
                System.out.println(indexRight);
                System.out.println("-");

                if (indexWrong > indexRight) {
                    if ((indexWrong - indexRight) != 0) {
                        System.out.println("-----------");

                        indexWrong--;
                        try {
                            textToType.getHighlighter().removeAllHighlights();
                            textToType.getHighlighter().addHighlight(0, indexRight, cyanPainter);
                            textToType.getHighlighter().addHighlight(indexRight, indexWrong, redPainter);
                            // revalidate();
                            //repaint();

                        } catch (BadLocationException ble) {

                        }
                        if (indexWrong == indexRight) {
                            indexWrong = 0;
                        }
                    }
                } else {
                    if (indexRight != 0) {
                        indexRight--;
                        try {
                            textToType.getHighlighter().removeAllHighlights();
                            textToType.getHighlighter().addHighlight(0, indexRight, cyanPainter);
                            //revalidate();

                            //repaint();
                        } catch (BadLocationException ble) {

                        }
                    }
                }
            } else {
                return;
            }
        } else {
            if (indexWrong == 0 && text[indexRight] == c) {
                indexRight++;
                try {
                    textToType.getHighlighter().addHighlight(0, indexRight, cyanPainter);
                } catch (BadLocationException ble) {

                }
                if (text.length == indexRight) {
                    textField.setEnabled(false);
                }
            } else {
                if (indexWrong == 0) {
                    indexWrong = indexRight + 1;
                } else {
                    indexWrong++;
                }
                try {
                    textToType.getHighlighter().addHighlight(indexRight, indexWrong, redPainter);
                } catch (BadLocationException ble) {

                }
            }
        }
    }//GEN-LAST:event_textFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new typingGameGui().setVisible(true);
            }
        });
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField textField;
    private javax.swing.JTextArea textToType;
    // End of variables declaration//GEN-END:variables
    private int indexRight;
    private int indexWrong;
    private javax.swing.text.Highlighter.HighlightPainter cyanPainter;
    private javax.swing.text.Highlighter.HighlightPainter redPainter;


}
