/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static javax.management.timer.Timer.ONE_SECOND;
import javax.swing.SwingConstants;
import javax.swing.Timer;
import javax.swing.text.BadLocationException;

/**
 *
 * @author milluki
 */
public class typingGameGui extends javax.swing.JFrame {

    /**
     * Creates new form typingGameGui
     */
    public typingGameGui() {
        initComponents();
        indexRight = 0;
        indexWrong = 0;
        cyanPainter = new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.cyan);
        redPainter = new javax.swing.text.DefaultHighlighter.DefaultHighlightPainter(Color.red);
        timer = new Timer((int) ONE_SECOND, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println(countdown);
                countdown--;
                if (countdown == 0) {
                    textField.setText("");
                    textField.setHorizontalAlignment(SwingConstants.LEFT);
                    playAgainButton.setEnabled(true);
                    countdown = 4;
                    ((Timer) e.getSource()).stop();
                    countdownIsDone = true;

                    textField.setText("");
                    textField.setEnabled(true);
                    textField.requestFocusInWindow();
                } else if (countdown == 3) {
                    //countdownIsDone = false;
                    textField.setEnabled(false);
                    playAgainButton.setEnabled(false);
                    textField.setHorizontalAlignment(SwingConstants.CENTER);
                    textField.setDisabledTextColor(Color.red);
                    textField.setText(String.valueOf(countdown));

                } else {
                    textField.setText(String.valueOf(countdown));

                }
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        wps = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textToType = new javax.swing.JTextArea();
        textField = new javax.swing.JTextField();
        playAgainButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        setPreferredSize(new java.awt.Dimension(640, 640));
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("(wps)");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        javax.swing.GroupLayout wpsLayout = new javax.swing.GroupLayout(wps);
        wps.setLayout(wpsLayout);
        wpsLayout.setHorizontalGroup(
            wpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(wpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(wpsLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        wpsLayout.setVerticalGroup(
            wpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(wpsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(wpsLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(wps);

        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.columnWeights = new double[] {0.1};
        jPanel2Layout.rowWeights = new double[] {0.1};
        jPanel2.setLayout(jPanel2Layout);

        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        textToType.setEditable(false);
        textToType.setColumns(20);
        textToType.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        textToType.setLineWrap(true);
        textToType.setRows(5);
        textToType.setText("hello world");
        textToType.setWrapStyleWord(true);
        textToType.setRequestFocusEnabled(false);
        jScrollPane1.setViewportView(textToType);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_START;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        javax.swing.SwingUtilities.invokeLater( new Runnable() {
            public void run() {
                textField.requestFocusInWindow();
            }
        });
        textField.setEnabled(false);
        textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(textField, gridBagConstraints);

        playAgainButton.setText("Play");
        playAgainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAgainButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        jPanel2.add(playAgainButton, gridBagConstraints);

        getContentPane().add(jPanel2);

        jLabel1.setText("Statistics goes here");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textFieldKeyTyped
        char c = evt.getKeyChar();
        char[] text = textToType.getText().toCharArray();
        if (c == ' ' || c == '\n') {
            if (indexWrong == 0 && (text[indexRight] == ' ' || text[indexRight] == '\n')) {
                textField.setText("");
                indexRight++;
                return;
            }
        }
        if (c == KeyEvent.VK_BACKSPACE) { //backspace
            if ((!(textField.getText().equals(""))) || indexWrong != 0) {
                // System.out.println("-");
                //System.out.println(indexWrong);
                //System.out.println(indexRight);
                //System.out.println("-");

                if (indexWrong > indexRight) {
                    if ((indexWrong - indexRight) != 0) {
                        // System.out.println("-----------");

                        indexWrong--;
                        try {
                            textToType.getHighlighter().removeAllHighlights();
                            textToType.getHighlighter().addHighlight(0, indexRight, cyanPainter);
                            textToType.getHighlighter().addHighlight(indexRight, indexWrong, redPainter);
                            // revalidate();
                            //repaint();

                        } catch (BadLocationException ble) {

                        }
                        if (indexWrong == indexRight) {
                            indexWrong = 0;
                        }
                    }
                } else {
                    if (indexRight != 0) {
                        indexRight--;
                        try {
                            textToType.getHighlighter().removeAllHighlights();
                            textToType.getHighlighter().addHighlight(0, indexRight, cyanPainter);
                            //revalidate();

                            //repaint();
                        } catch (BadLocationException ble) {

                        }
                    }
                }
            } else {
                return;
            }
        } else {
            if (indexWrong == 0 && text[indexRight] == c) {
                indexRight++;
                try {
                    textToType.getHighlighter().addHighlight(0, indexRight, cyanPainter);
                } catch (BadLocationException ble) {

                }
                if (text.length == indexRight) {
                    textField.setText("");
                    textField.setEnabled(false);
                    playAgainButton.setText("Play");
                }
            } else {
                if (indexWrong == 0) {
                    indexWrong = indexRight + 1;
                } else {
                    indexWrong++;
                }
                try {
                    textToType.getHighlighter().addHighlight(indexRight, indexWrong, redPainter);
                } catch (BadLocationException ble) {

                }
            }
        }
    }//GEN-LAST:event_textFieldKeyTyped

    private void playAgainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAgainButtonActionPerformed
        indexRight = 0;
        indexWrong = 0;
        textToType.getHighlighter().removeAllHighlights();
        textField.setDisabledTextColor(Color.black);
        textField.setText("loading..");
        countdown = 4;
        timer.start();
        if (playAgainButton.getText().equals("Play")) {
            playAgainButton.setText("Restart");
        }


    }//GEN-LAST:event_playAgainButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(typingGameGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new typingGameGui().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton playAgainButton;
    private javax.swing.JTextField textField;
    private javax.swing.JTextArea textToType;
    private javax.swing.JPanel wps;
    // End of variables declaration//GEN-END:variables
    private int indexRight;
    private int indexWrong;
    private javax.swing.text.Highlighter.HighlightPainter cyanPainter;
    private javax.swing.text.Highlighter.HighlightPainter redPainter;
    private Timer timer;
    private int countdown = 4;
    private boolean countdownIsDone = true;

}
